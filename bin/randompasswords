#!/usr/bin/env ruby
`alias randompass="randompasswords"`

require 'dev-random-passwords'
require 'optparse'

rpg = DevRandomPasswords::Generator.new
options = {
      'lowercase' => true,
      'uppercase' => true,
      'digits' => true,
      'special' => true,
      'include' => nil,
      'exclude' => nil,
      'length' => 12,
      'requirements' => {'digits' => true, 'uppercase' => true, 'lowercase' => true, 'special' => true},
      'hardware' => false
    }


opts = OptionParser.new do |opts|
  opts.banner = "Usage: randompasswords [options]"
  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-l", "--length [DIGITS]", "Password length in digits (default is 12)") do |length|
    options['length'] = length.to_i
  end

  opts.on("-c", "--characters digits,uppercase,lowercase",
      Array, "List of character types to use comma separated") do |list|
    ['lowercase','uppercase','digits','special'].each do |chartype|
      if list.include? chartype
        options[chartype] = true
      else
        options[chartype] = false
      end
    end
  end

  opts.on("-i", "--include [LETTERS]", "Characters to include in the password") do |include_chars|
    options['include'] = include_chars
  end

  opts.on("-e", "--exclude [LETTERS]", "Characters to exclude from the password") do |exclude_chars|
    options['exclude'] = exclude_chars
  end

  opts.on("-r", "--require special,lowercase,digits",
      Array, "List of character types to require in the generated password comma separated") do |req|
    req_hash = {}
    ['lowercase','uppercase','digits','special'].each do |chartype|
      if req.include? chartype
        req_hash[chartype] = true
      else
        req_hash[chartype] = false
      end
    end
    options['requirements'] = req_hash
  end

  opts.on("-H", "--hardware", "Use hardware random generators defaults back if none found") do |hw|
    options['hardware'] = true
  end

  #Help
  opts.on_tail("-h", "--help", "Show this message") do
    print "\n"
    puts opts
    print "\n"
    exit
  end

end

opts.parse!(ARGV)
rpg.set_options(options)
puts rpg.generate

